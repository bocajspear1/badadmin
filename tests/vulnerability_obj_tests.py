import sys
import os
sys.path.append("./modules") 

from base import vulnerability

name = "test"
desc = "this is a test"

def test_vulnerability_create():
	
	
	provides = 'test'
	version = '1.0.0'
	
	vuln = vulnerability(name, desc, provides, version)
	
	assert vuln.get_name() == name
	assert vuln.get_description() == desc
	assert vuln.get_provides() == provides
	assert vuln.get_version() == version

def test_vulnerability_create_invalid():
	
	
	provides = ['t']
	version = '1.0.0'
	try:
		vuln = vulnerability(name, desc, provides, version)
		assert False
	except ValueError:
		assert True
	
	provides = ['t']
	version = '1.0.0'
	try:
		vuln = vulnerability({"g":"g"}, desc, provides, version)
		assert False
	except ValueError:
		assert True

def test_vulnerability_create_basic():

	
	vuln = vulnerability(name, desc)
	
	assert vuln.get_name() == name
	assert vuln.get_description() == desc
	assert vuln.get_provides() == ""
	assert vuln.get_version() == ""

def test_vulnerability_version_compare1():
	
	provides = 'test'
	version = '1.0.0'
	
	vuln = vulnerability(name, desc, provides, version)
	
	assert vuln.compare_version("1.0.1") == 1
	assert vuln.compare_version("1.0.0") == 0
	assert vuln.compare_version("2.0.1a") == 1
	assert vuln.compare_version("1.0.0a") == 1
	assert vuln.compare_version("0.1.0") == -1
	assert vuln.compare_version("0.9.1") == -1

def test_vulnerability_version_compare2():
	
	provides = 'test'
	version = '1.0.0b'
	
	vuln = vulnerability(name, desc, provides, version)
	
	assert vuln.compare_version("1.0.1") == 1
	assert vuln.compare_version("1.0.0") == -1
	assert vuln.compare_version("2.0.1a") == 1
	assert vuln.compare_version("1.0.0a") == -1
	assert vuln.compare_version("0.1.0") == -1
	assert vuln.compare_version("1.0.0b") == 0

def test_vulnerability_version_compare_invalid():
	
	provides = 'test'
	version = '1.0.0'
	
	vuln = vulnerability(name, desc, provides, version)
	
	try:
		vuln.compare_version(['asd'])
		assert False
	except ValueError:
		assert True
	

def test_vulnerability_version_range1():
	
	provides = 'test'
	version = '1.0.0'
	
	vuln = vulnerability(name, desc, provides, version)
	
	assert vuln.test_required_range(">1.0.1") == False
	assert vuln.test_required_range("<1.0.1") == True
	assert vuln.test_required_range(">1.0.0") == False
	assert vuln.test_required_range(">=1.0.0") == True
	assert vuln.test_required_range("<=1.0.0") == True
	assert vuln.test_required_range("<=2.0.0") == True
	assert vuln.test_required_range(">=2.0.0") == False
	assert vuln.test_required_range(">=2.0.0c") == False
	assert vuln.test_required_range("=2.0.0v") == False

def test_vulnerability_version_range2():
	
	provides = 'test'
	version = '1.0.0c'
	
	vuln = vulnerability(name, desc, provides, version)
	
	assert vuln.test_required_range(">1.0.1") == False
	assert vuln.test_required_range(">1.0.0c") == False
	assert vuln.test_required_range("<1.0.1") == True
	assert vuln.test_required_range("=1.0.0c") == True
	assert vuln.test_required_range(">=1.0.0") == True
	assert vuln.test_required_range("<=1.0.0c") == True
	assert vuln.test_required_range("<=2.0.0") == True
	assert vuln.test_required_range(">=2.0.0") == False
	assert vuln.test_required_range(">2.0.0") == False


def test_vulnerability_link_valid_http():
	
	vuln = vulnerability(name, desc)
	
	link = "http://google.com/?q=test"
	
	vuln.set_link(link)
	
	assert vuln.get_link() == link

def test_vulnerability_link_valid_https():
	
	vuln = vulnerability(name, desc)
	
	link = "https://google.com/?q=test"
	
	vuln.set_link(link)
	
	assert vuln.get_link() == link
	
def test_vulnerability_link_invalid():
	
	vuln = vulnerability(name, desc)
	
	link = "test"
	try:
		vuln.set_link(link)
		assert False
	except ValueError:
		assert True

def test_vulnerability_dependency_add():
	
	provides = 'test'
	version = '3.0.1'
	
	vuln = vulnerability(name, desc, provides, version)
	
	vuln.add_dependency("app1", ">=1.0.0")
	
	dep_list = vuln.get_dependencies()
	
	assert dep_list[0].provides_string() == "app1"
	assert dep_list[0].version_range() == ">=1.0.0"

def test_vulnerability_dependency_invalid():
	
	provides = 'test'
	version = '1.0.0'
	
	vuln = vulnerability(name, desc, provides, version)
	
	try:
		vuln.add_dependency(['g'], ">=1.0.0")
		assert False
	except ValueError:
		assert True
	
	try:
		vuln.add_dependency(None, 'blaa')
		assert False
	except ValueError:
		assert True

	try:
		vuln.add_dependency(None, {'g':'f'})
		assert False
	except ValueError:
		assert True

def test_vulnerability_cmd_uses():
	
	provides = 'test'
	version = '3.0.1'
	
	cmd = "cat"
	
	vuln = vulnerability(name, desc, provides, version)
	
	vuln.add_cmd_uses(cmd)
	
	cmd_list = vuln.get_cmd_uses()
	
	assert cmd_list[0] == cmd


def test_vulnerability_cmd_uses_invalid():
	
	provides = 'test'
	version = '1.0.0'
	
	vuln = vulnerability(name, desc, provides, version)
	
	try:
		vuln.add_cmd_uses([])
		assert False
	except ValueError:
		assert True
	
	try:
		vuln.add_cmd_uses(None)
		assert False
	except ValueError:
		assert True

	try:
		vuln.add_cmd_uses(False)
		assert False
	except ValueError:
		assert True

def test_vulnerability_cmd_modifies():
	
	provides = 'test'
	version = '3.0.1'
	
	cmd = "cat"
	
	vuln = vulnerability(name, desc, provides, version)
	
	vuln.add_cmd_modifies(cmd)
	
	cmd_list = vuln.get_cmd_modifies()
	
	assert cmd_list[0] == cmd

def test_vulnerability_cmd_modifies_invalid():
	
	provides = 'test'
	version = '1.0.0'
	
	vuln = vulnerability(name, desc, provides, version)
	
	try:
		vuln.add_cmd_modifies({})
		assert False
	except ValueError:
		assert True
	
	try:
		vuln.add_cmd_modifies(None)
		assert False
	except ValueError:
		assert True

	try:
		vuln.add_cmd_modifies(True)
		assert False
	except ValueError:
		assert True
